/**
 * @file Firestore Security Rules for StyleSpace
 * @version Prototyping
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data (profiles, orders, style recommendations, shopping cart) and allows public read access to product information. Data validation is relaxed to facilitate rapid prototyping, focusing on authorization and relational integrity.
 * @data_structure User-specific data is nested under `/users/{userId}`. Product data is stored in the top-level `/products` collection.
 * @key_security_decisions
 *   - User listing is disabled for privacy.
 *   - Public read access is granted to the `/products` collection.
 *   - Strict ownership is enforced for all user-related data.
 *   - No complex data validation is performed during this prototyping phase beyond authorization checks.
 * @denormalization_for_authorization The userId is encoded directly into the paths for user-specific data, avoiding the need for `get()` calls to determine ownership.
 * @structural_segregation Public product data is stored in a top-level collection, while private user data is stored under the `/users/{userId}` path, enabling clear access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     * @example isSignedIn() == true
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {bool} True if the authenticated user ID matches the provided user ID, false otherwise.
     * @example isOwner("user123") == true
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID that should own the document.
     * @return {bool} True if the authenticated user owns the document and the document exists.
     * @example isExistingOwner("user123") == true
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists( /databases/$(database)/documents/users/$(userId) );
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) Authenticated user with ID matching the path creates their own profile.
     * @allow (get, update, delete) Authenticated user with ID matching the path accesses their profile.
     * @deny (create) Authenticated user attempts to create a profile with an ID that doesn't match their own.
     * @deny (get, update, delete) Unauthenticated user attempts to access any user profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete products. // TODO: Add Admin role
     * @principle Allows public read access to product information while restricting write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /users/{userId}/shoppingCart collection.
     * @path /users/{userId}/shoppingCart
     * @allow (get, create, update, delete) Authenticated user with ID matching the path accesses their shopping cart.
     * @deny (get, create, update, delete) Unauthenticated user attempts to access any user's shopping cart.
     * @principle Enforces document ownership for all operations on shopping carts.
     */
    match /users/{userId}/shoppingCart/{documentId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId} collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, create, update, delete) Authenticated user with ID matching the path accesses their order.
     * @deny (get, create, update, delete) Unauthenticated user attempts to access any user's order.
     * @principle Enforces document ownership for all operations on orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/styleRecommendations/{recommendationId} collection.
     * @path /users/{userId}/styleRecommendations/{recommendationId}
     * @allow (get, create, update, delete) Authenticated user with ID matching the path accesses their style recommendations.
     * @deny (get, create, update, delete) Unauthenticated user attempts to access any user's style recommendations.
     * @principle Enforces document ownership for all operations on style recommendations.
     */
    match /users/{userId}/styleRecommendations/{recommendationId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}