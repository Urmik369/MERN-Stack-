/**
 * @fileoverview Firestore Security Rules for StyleSpace Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to product information.  Path-based
 * authorization is used extensively to avoid costly `get()` calls within rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /products/{productId}: Stores product information available to all users.
 * - /users/{userId}/shoppingCart: Stores a single shopping cart document for each user.
 * - /users/{userId}/orders/{orderId}: Stores order history for each user.
 * - /users/{userId}/styleRecommendations/{recommendationId}: Stores AI style recommendations for each user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile and associated data (shopping cart, orders, style recommendations).
 * - Product information is publicly readable.
 * - Data validation is relaxed in this prototyping phase, focusing on ownership and relational integrity.
 * - No user listing is allowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced through path-based matching (e.g., /users/{userId}), avoiding the need to store and check user IDs within the documents themselves.
 *
 * Structural Segregation:
 * - User-specific data is stored under the /users/{userId} path, ensuring a clear separation between private and public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile.
     * @allow (get, update, delete) Authenticated user accesses their own profile.
     * @deny (create) Non-authenticated user attempts to create a profile.
     * @deny (get, update, delete) Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to product documents.
     * @path /products/{productId}
     * @allow (get, list) All users can view product information.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete products.
     * @principle Allows public read access to product data, restricts write access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to shopping cart documents for a user.
     * @path /users/{userId}/shoppingCart
     * @allow (get, update, create, delete) Authenticated user accesses their own shopping cart.
     * @deny (get, update, create, delete) Authenticated user attempts to access another user's shopping cart.
     * @principle Enforces document ownership for shopping carts.
     */
    match /users/{userId}/shoppingCart {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to order documents for a user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, update, create, delete) Authenticated user accesses their own order history.
     * @deny (get, update, create, delete) Authenticated user attempts to access another user's order history.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to style recommendation documents for a user.
     * @path /users/{userId}/styleRecommendations/{recommendationId}
     * @allow (get, update, create, delete) Authenticated user accesses their own style recommendations.
     * @deny (get, update, create, delete) Authenticated user attempts to access another user's style recommendations.
     * @principle Enforces document ownership for style recommendations.
     */
    match /users/{userId}/styleRecommendations/{recommendationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}