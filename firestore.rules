/**
 * @fileoverview Firestore Security Rules for StyleSpace.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to product information.  Path-based
 * authorization is used extensively to avoid costly `get()` calls within rules.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the owning user.
 * - /products/{productId}: Public product catalog, readable by all, writable by no one in this prototype.
 * - /users/{userId}/shoppingCart: Shopping cart data, accessible only by the owning user. Uses a single document in the subcollection.
 * - /users/{userId}/orders/{orderId}: Order history, accessible only by the owning user.
 * - /users/{userId}/styleRecommendations/{recommendationId}: Style recommendations, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Products are publicly readable but not writable in this prototype.  In a
 *   production environment, writes would be restricted to administrative roles.
 * - All user-owned data is nested under /users/{userId} to leverage path-based
 *   authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces read and write access to user profiles only to the owning user.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, create, update, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //function
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to product information.  Write access is denied in this prototype.
     * @path /products/{productId}
     * @allow (get, list) if true
     * @deny (create, update, delete) always
     * @principle Products are publicly readable.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces read and write access to shopping cart data only to the owning user.
     * @path /users/{userId}/shoppingCart
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, create, update, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCart {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces read and write access to order data only to the owning user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, create, update, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces read and write access to style recommendation data only to the owning user.
     * @path /users/{userId}/styleRecommendations/{recommendationId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, create, update, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/styleRecommendations/{recommendationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}