/**
 * @fileOverview Firestore Security Rules for StyleSpace.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to product information.
 *
 * Data Structure:
 * - User profiles: /users/{userId}
 * - Products: /products/{productId}
 * - Shopping Carts: /users/{userId}/shoppingCart
 * - Orders: /users/{userId}/orders/{orderId}
 * - Style Recommendations: /users/{userId}/styleRecommendations/{recommendationId}
 *
 * Key Security Decisions:
 * - User data is strictly owned by the user, enforced through path-based rules.
 * - Products are publicly readable but write access is not granted.  A later iteration will add admin support.
 * - Listing of user profiles is disallowed.
 *
 * Denormalization for Authorization:
 *  - User ID is encoded in the path for user-owned documents, avoiding the need for document-level userId properties and `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (get, list) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing user profiles is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to product information.
     * @path /products/{productId}
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone.
     * @principle Products are publicly readable.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to shopping cart data for a specific user.
     * @path /users/{userId}/shoppingCart/{cartId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (get, list) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCart/{cartId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to order data for a specific user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (get, list) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to style recommendation data for a specific user.
     * @path /users/{userId}/styleRecommendations/{recommendationId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (get, list) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/styleRecommendations/{recommendationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}