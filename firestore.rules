/**
 * @fileoverview Firestore Security Rules for StyleSpace.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to product information. User-specific data (profiles, orders, recommendations, shopping cart) is nested under the `/users/{userId}` path, ensuring that only the authenticated user can access their own information. Product information is stored in a top-level `/products` collection and is publicly readable.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles.
 * - `/products/{productId}`: Stores product information.
 * - `/users/{userId}/shoppingCart`: Stores shopping cart information for the user.
 * - `/users/{userId}/orders/{orderId}`: Stores order history for the user.
 * - `/users/{userId}/styleRecommendations/{recommendationId}`: Stores style recommendations for the user.
 *
 * Key Security Decisions:
 * - User listing is disabled for security.
 * - Product information is publicly readable but write access should be protected.
 * - All write operations on user-owned data require authentication and authorization.
 *
 * Denormalization for Authorization:
 * - The `userId` is already present in each user-owned document path (e.g., `/users/{userId}/orders/{orderId}`). This avoids needing to duplicate the `userId` in the document itself.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to read their own profile
      allow get: if isOwner(userId);

      // Allow a user to create their own profile, enforcing that the userId in the path matches the authenticated user's ID
      allow create: if isSignedIn() && isOwner(userId);

      // Allow a user to update their own profile
      allow update: if isExistingOwner(userId);

      // Allow a user to delete their own profile
      allow delete: if isExistingOwner(userId);

      // Prevent listing all users
      allow list: if false;
    }

    /**
     * @description Controls access to product information.
     * @path /products/{productId}
     * @allow (get) Any user can read product information.
     * @allow (list) Any user can list products.
     * @deny (create) No user can create a product without specific authorization. // TODO: Add more restrictive rules if necessary.
     * @deny (update) No user can update a product without specific authorization. // TODO: Add more restrictive rules if necessary.
     * @deny (delete) No user can delete a product without specific authorization. // TODO: Add more restrictive rules if necessary.
     * @principle Allows public read access but requires specific authorization for writes.
     */
    match /products/{productId} {
      // Allow anyone to read product information
      allow get, list: if true;

      // Only allow specific roles (e.g., admin) to create, update, or delete products
      allow create, update, delete: if false; // TODO: Implement role-based access control for product management.
    }

    /**
     * @description Controls access to the user's shopping cart.
     * @path /users/{userId}/shoppingCart
     * @allow (create) User with ID 'user123' can create a shopping cart for themselves.
     * @allow (get) User with ID 'user123' can read their own shopping cart.
     * @allow (update) User with ID 'user123' can update their own shopping cart.
     * @allow (delete) User with ID 'user123' can delete their own shopping cart.
     * @deny (create) User with ID 'user456' cannot create a shopping cart for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the shopping cart of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the shopping cart of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the shopping cart of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCart {

      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      // Allow the owner to list their shopping cart
      allow list: if isOwner(userId);
    }

    /**
     * @description Controls access to the user's orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' can create an order for themselves.
     * @allow (get) User with ID 'user123' can read their own order.
     * @allow (update) User with ID 'user123' can update their own order.
     * @allow (delete) User with ID 'user123' can delete their own order.
     * @deny (create) User with ID 'user456' cannot create an order for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the order of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the order of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the order of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {

      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      // Allow the owner to list their orders
      allow list: if isOwner(userId);
    }

    /**
     * @description Controls access to the user's style recommendations.
     * @path /users/{userId}/styleRecommendations/{recommendationId}
     * @allow (create) User with ID 'user123' can create a style recommendation for themselves.
     * @allow (get) User with ID 'user123' can read their own style recommendation.
     * @allow (update) User with ID 'user123' can update their own style recommendation.
     * @allow (delete) User with ID 'user123' can delete their own style recommendation.
     * @deny (create) User with ID 'user456' cannot create a style recommendation for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the style recommendation of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the style recommendation of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the style recommendation of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/styleRecommendations/{recommendationId} {

      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      // Allow the owner to list their style recommendations
      allow list: if isOwner(userId);
    }
  }
}