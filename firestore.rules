/**
 * @fileoverview Firestore Security Rules for StyleSpace.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to product information.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can access their profile.
 * - /products/{productId}: Stores product information. Publicly readable.
 * - /users/{userId}/shoppingCart: Stores a user's shopping cart. Only accessible by the user.  Only one cart per user.
 * - /users/{userId}/orders/{orderId}: Stores user orders. Only accessible by the user.
 * - /users/{userId}/styleRecommendations/{recommendationId}: Stores style recommendations. Only accessible by the user.
 *
 * Key Security Decisions:
 * - Public read access to product information.
 * - Strict user-ownership for all data nested under /users/{userId}.
 * - Data consistency checks to prevent unauthorized data manipulation (e.g., userId in document must match the path).
 * - Prevents listing of the shoppingCart subcollection.
 *
 * Denormalization for Authorization:
 *  - The `userId` is derived from the path `/users/{userId}` and is not stored in the shoppingCart document itself to avoid redundancy and simplify security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Secure user profiles.
     * @path /users/{userId}
     * @allow (read) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update their profile if the userId matches their auth.uid.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @deny (update) A user cannot modify another user's profile.
     * @deny (delete) A user cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (read) Any user can read product information.
     * @deny (create) No one can create products through client.
     * @deny (update) No one can update products through client.
     * @deny (delete) No one can delete products through client.
     * @principle Allows public read with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure user's shopping cart.
     * @path /users/{userId}/shoppingCart
     * @allow (read) Authenticated user can read their own shopping cart.
     * @allow (create) Authenticated user can create their shopping cart.
     * @allow (update) Authenticated user can update their own shopping cart.
     * @deny (create) An unauthenticated user cannot create a shopping cart.
     * @deny (update) A user cannot modify another user's shopping cart.
     * @deny (delete) A user cannot delete another user's shopping cart.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/shoppingCart {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure user's orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (read) Authenticated user can read their own orders.
     * @allow (create) Authenticated user can create orders if the userId matches.
     * @allow (update) Authenticated user can update their own orders if the userId matches.
     * @deny (create) An unauthenticated user cannot create orders.
     * @deny (update) A user cannot modify another user's orders.
     * @deny (delete) A user cannot delete another user's orders.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure user's style recommendations.
     * @path /users/{userId}/styleRecommendations/{recommendationId}
     * @allow (read) Authenticated user can read their own style recommendations.
     * @allow (create) Authenticated user can create style recommendations if the userId matches.
     * @allow (update) Authenticated user can update their own style recommendations if the userId matches.
     * @deny (create) An unauthenticated user cannot create style recommendations.
     * @deny (update) A user cannot modify another user's style recommendations.
     * @deny (delete) A user cannot delete another user's style recommendations.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/styleRecommendations/{recommendationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}