rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}
     * @allow (get, list) User with matching {userId}.
     * @allow (create) User with matching {userId} can create their profile.
     * @deny (update, delete) All other users.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Verifies that the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Checks if the requested user id is the same as the authenticated user id.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user exists (only applies to update/delete)
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      
      // Allow the user to read their own profile
      allow get: if isOwner(userId);
      allow list: if false; // No user listing

      // Allow the user to create their own profile
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Allow the user to update their own profile, but prevent changing the user ID.
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to product information.
     * @path /products/{productId}
     * @allow (get, list) All users.
     * @deny (create, update, delete) All users. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to shopping cart data for a user.
     * @path /users/{userId}/shoppingCart
     * @allow (get) User with matching {userId}.
     * @allow (create) User with matching {userId} can create their cart.
     * @deny (update, delete) All other users.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/shoppingCart {
      // Checks if the requested user id is the same as the authenticated user id.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      // Check if the user exists (only applies to update/delete)
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);

      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to order history data for a user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list) User with matching {userId}.
     * @allow (create) User with matching {userId} can create orders.
     * @deny (update, delete) All other users.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId} {
      // Checks if the requested user id is the same as the authenticated user id.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      // Check if the user exists (only applies to update/delete)
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);

      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to style recommendations for a user.
     * @path /users/{userId}/styleRecommendations/{recommendationId}
     * @allow (get, list) User with matching {userId}.
     * @allow (create) User with matching {userId} can create style recommendations.
     * @deny (update, delete) All other users.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/styleRecommendations/{recommendationId} {
      // Checks if the requested user id is the same as the authenticated user id.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      // Check if the user exists (only applies to update/delete)
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);

      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}