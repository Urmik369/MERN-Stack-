/**
 * @fileoverview Firestore Security Rules for StyleSpace.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profiles, shopping carts, orders, style recommendations). Products are publicly
 * readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can
 *   access their own profile.
 * - /products/{productId}: Stores product information. Publicly readable.
 * - /users/{userId}/shoppingCart: Stores shopping cart data. Only the
 *   authenticated user can access their own cart.
 * - /users/{userId}/orders/{orderId}: Stores user orders. Only the
 *   authenticated user can access their own orders.
 * - /users/{userId}/styleRecommendations/{recommendationId}: Stores style recommendations.
 *   Only the authenticated user can access their own recommendations.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Shopping carts are stored as a single document in a subcollection.
 * - All writes to user-owned data require authentication and must match the
 *   path's userId.
 *
 * Denormalization for Authorization:
 * - The `userId` is implicitly available from the path for user-owned data, so
 *   we don't need to duplicate it in the document itself.
 *
 * Structural Segregation:
 * - User-owned data is stored in user-specific subcollections to ensure
 *   path-based ownership.
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the authenticated user can
     *              read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user
     *        with the matching userId.
     * @deny (get) if the request is made by any other user.
     * @deny (create) if the userId does not match the authenticated user's ID.
     * @deny (update) if the userId does not match the authenticated user's ID.
     * @deny (delete) if the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Permissions
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures product information. Products are publicly readable
     *              but writes are disallowed.
     * @path /products/{productId}
     * @allow (get, list) if true (publicly readable).
     * @deny (create, update, delete) always (writes are disallowed).
     * @principle Products are read-only for all users.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures shopping cart data. Only the authenticated user can
     *              read or write their own shopping cart.
     * @path /users/{userId}/shoppingCart
     * @allow (get, create, update, delete) if the request is made by the user
     *        with the matching userId.
     * @deny (get) if the request is made by any other user.
     * @deny (create) if the userId does not match the authenticated user's ID.
     * @deny (update) if the userId does not match the authenticated user's ID.
     * @deny (delete) if the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCart {
       // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Permissions
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures orders placed by the user. Only the authenticated user can
     *              read or write their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, create, update, delete) if the request is made by the user
     *        with the matching userId.
     * @deny (get) if the request is made by any other user.
     * @deny (create) if the userId does not match the authenticated user's ID.
     * @deny (update) if the userId does not match the authenticated user's ID.
     * @deny (delete) if the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Permissions
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures style recommendations for the user. Only the
     *              authenticated user can read or write their own
     *              recommendations.
     * @path /users/{userId}/styleRecommendations/{recommendationId}
     * @allow (get, create, update, delete) if the request is made by the user
     *        with the matching userId.
     * @deny (get) if the request is made by any other user.
     * @deny (create) if the userId does not match the authenticated user's ID.
     * @deny (update) if the userId does not match the authenticated user's ID.
     * @deny (delete) if the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/styleRecommendations/{recommendationId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Permissions
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}