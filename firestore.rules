/**
 * @fileoverview Firestore Security Rules for StyleSpace.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to product information.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}, ensuring only the
 *   authenticated user can access their profile data.
 * - Products are stored in a root-level collection /products and are
 *   accessible to all users.
 * - Shopping carts are located at /users/{userId}/shoppingCart, using
 *   path-based ownership for access control.
 * - Orders and StyleRecommendations are structured under /users/{userId},
 *   reinforcing the 1:N relationship and simplifying security rules.
 *
 * Key Security Decisions:
 * - User data is strictly segregated under the /users/{userId} path.
 * - Public read access is granted to the /products collection.
 * - List operations are only allowed for the owner of user-scoped data.
 * - All write operations are protected by authorization checks based on
 *   user identity and document ownership.
 *
 * Denormalization for Authorization:
 * - The `userId` is implicitly available from the path for documents under
 *   `/users/{userId}`, avoiding the need to duplicate it in the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isSignedIn function.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the isOwner function.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines the isExistingOwner function.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (get, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product information.
     * @deny (create, update, delete) - Only authorized admin can perform writes.
     * @principle Allows public read access and restricts writes to authorized accounts only.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/shoppingCart/{cartId} collection.
     * @path /users/{userId}/shoppingCart
     * @allow (get, list, create, update, delete) - Authenticated user manages their own shopping cart.
     * @deny (get, list, create, update, delete) - Authenticated user attempts to manage another user's shopping cart.
     * @principle Enforces document ownership for shopping cart management.
     */
    match /users/{userId}/shoppingCart/{cartId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId} collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete) - Authenticated user manages their own orders.
     * @deny (get, list, create, update, delete) - Authenticated user attempts to manage another user's orders.
     * @principle Enforces document ownership for order management.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/styleRecommendations/{recommendationId} collection.
     * @path /users/{userId}/styleRecommendations/{recommendationId}
     * @allow (get, list, create, update, delete) - Authenticated user manages their own style recommendations.
     * @deny (get, list, create, update, delete) - Authenticated user attempts to manage another user's style recommendations.
     * @principle Enforces document ownership for style recommendation management.
     */
    match /users/{userId}/styleRecommendations/{recommendationId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}