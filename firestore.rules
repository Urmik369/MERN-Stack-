/**
 * @fileoverview Firestore Security Rules for StyleSpace.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to product information.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only to the authenticated user.
 * - /products/{productId}: Stores product information; publicly readable.
 * - /users/{userId}/shoppingCart: Stores the user's shopping cart; accessible only to the authenticated user.
 * - /users/{userId}/orders/{orderId}: Stores user orders; accessible only to the authenticated user.
 * - /users/{userId}/styleRecommendations/{recommendationId}: Stores style recommendations; accessible only to the authenticated user.
 *
 * Key Security Decisions:
 * - User-specific data is strictly controlled via path-based ownership.
 * - Products are publicly readable, but write access is not currently defined (and thus denied).
 * - Listing of the root collection is denied because it is not user specific.
 * - No data validation is performed in this prototyping phase, except for ownership on creation of user documents.
 *
 * Denormalization for Authorization:
 * - Path-based ownership is used throughout the data model to avoid costly `get()` calls. The userId is implicit from the path.
 *
 * Structural Segregation:
 * - User-specific data is stored in user subcollections (e.g., /users/{userId}/orders), separating it from public data (e.g., /products).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data);
    }
    
    /**
     * @description Denies listing of the entire database.
     * @path /databases/{database}/documents
     * @allow None: Listing the root is always denied.
     * @deny (list): Any user attempting to list the root of the database.
     * @principle Avoids exposing the entire database structure.
     */
    match /{document=**} {
      allow list: if false;
    }

    /**
     * @description Manages user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete): User with UID 'user123' accessing /users/user123.
     * @deny (create, update, delete): User with UID 'user456' attempting to modify /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) ;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages product information. Products are publicly readable but not writable in this prototype.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): All users are denied write access.
     * @principle Allows public read access to product data while restricting write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages shopping cart data. Only the authenticated user can read and write their own shopping cart.
     * @path /users/{userId}/shoppingCart
     * @allow (get, create, update, delete): User with UID 'user123' accessing /users/user123/shoppingCart.
     * @deny (create, update, delete): User with UID 'user456' attempting to modify /users/user123/shoppingCart.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/shoppingCart {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages orders placed by the user. Only the authenticated user can read and write their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, create, update, delete): User with UID 'user123' accessing /users/user123/orders/order1.
     * @deny (create, update, delete): User with UID 'user456' attempting to modify /users/user123/orders/order1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages style recommendations for the user. Only the authenticated user can read and write their own recommendations.
     * @path /users/{userId}/styleRecommendations/{recommendationId}
     * @allow (get, create, update, delete): User with UID 'user123' accessing /users/user123/styleRecommendations/rec1.
     * @deny (create, update, delete): User with UID 'user456' attempting to modify /users/user123/styleRecommendations/rec1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/styleRecommendations/{recommendationId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}