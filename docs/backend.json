{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the StyleSpace platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "registrationDate": {
          "type": "string",
          "description": "The date and time when the user registered.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "registrationDate"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a clothing item available for sale.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "price": {
          "type": "number",
          "description": "The price of the product."
        },
        "category": {
          "type": "string",
          "description": "The category of the product."
        },
        "inventory": {
          "type": "number",
          "description": "The current number of items in stock."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "imageUrl",
        "price",
        "category",
        "inventory"
      ]
    },
    "ShoppingCart": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ShoppingCart",
      "type": "object",
      "description": "Represents the user's shopping cart.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the shopping cart entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 ShoppingCart)"
        },
        "productIds": {
          "type": "array",
          "description": "References to Products. (Relationship: ShoppingCart 1:N Product)",
          "items": {
            "type": "string"
          }
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product"
        }
      },
      "required": [
        "id",
        "userId",
        "productIds"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "The date and time when the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "The status of the order (e.g., 'pending', 'shipped', 'delivered')."
        },
        "productIds": {
          "type": "array",
          "description": "References to Products. (Relationship: Order 1:N Product)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "orderDate",
        "totalAmount",
        "status",
        "productIds"
      ]
    },
    "StyleRecommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StyleRecommendation",
      "type": "object",
      "description": "Represents a style recommendation generated by the AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the style recommendation entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N StyleRecommendation)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N StyleRecommendation)"
        },
        "recommendationDate": {
          "type": "string",
          "description": "The date and time when the recommendation was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "productId",
        "recommendationDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Path-based ownership ensures only the authenticated user can access their profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information. Accessible to all users; no ownership restrictions.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/shoppingCart",
        "definition": {
          "entityName": "ShoppingCart",
          "schema": {
            "$ref": "#/backend/entities/ShoppingCart"
          },
          "description": "Stores the user's shopping cart data. Path-based ownership ensures only the user can access their cart. Includes productIds.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores orders placed by the user. Path-based ownership ensures only the user can access their orders.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/styleRecommendations/{recommendationId}",
        "definition": {
          "entityName": "StyleRecommendation",
          "schema": {
            "$ref": "#/backend/entities/StyleRecommendation"
          },
          "description": "Stores style recommendations for the user. Path-based ownership ensures only the user can access their recommendations.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "recommendationId",
              "description": "The unique identifier for the style recommendation."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and debuggability, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs. It uses Structural Segregation to maintain a homogeneous security posture within each collection.  \n\nAuthorization Independence is achieved by using path-based ownership for user-related data, avoiding the need for `get()` calls in security rules and enabling atomic operations. This structure also supports secure `list` operations by segregating data based on access needs and leveraging path-based ownership.  The database structure uses naming conventions that are explicit, improving readability and debuggability. For instance, user-owned data is nested under `/users/{userId}`, making ownership clear from the path itself.\n\nSpecifically, user profiles are stored under `/users/{userId}`, ensuring that only the authenticated user can access their own profile data.  Orders and StyleRecommendations are also structured under `/users/{userId}`, reinforcing the 1:N relationship and simplifying security rules. Products are stored in a root-level collection `/products` because they do not have a direct ownership relationship with individual users and are accessible to all users.\n\nShopping carts are located at `/users/{userId}/shoppingCart`, using path-based ownership for access control. In this case there is no need for a separate `userId` property in the document since it is implicit from the path.  This also allows us to use a single document inside the subcollection.\n\nThis design supports all QAPs as authorization is independent and filtering is not done in the rules, but by queries. All authorization rules can be written without the need to `get()` documents, meaning all reads are scalable and more secure."
  }
}
